/*
 * Copyright 2010 Aalto University, ComNet
 * Released under GPLv3. See LICENSE.txt for details.
 */
package report;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import core.DTNHost;
import core.Message;
import core.MessageListener;
import routing.MessageRouter;

/**
 * Reports each drop generated by a node. Drops that were created during the 
 * warm up period are ignored.
 */
public class DropReport extends Report implements MessageListener {
	private static String LOG_HEADER="simTime | node | alive"; 
	/**
	 * Constructor.
	 */
	public DropReport() {
		init();
	}

	@Override
	protected void init() {
		super.init();
		this.write("Drops for scenario " + getScenarioName() );
		this.write(LOG_HEADER);
	}


	public void messageDeleted(Message m, DTNHost where, boolean dropped) {
		if (isWarmupID(m.getId()) || isWarmDownID(m.getId())) {
			return;
		} else if(dropped) {
			this.write(String.format("%.2f %d %s", this.getSimTime(), where.getAddress(), m.getProperty(MessageRouter.MSG_PROP_ALIVE)));
		}		
	}


	public void messageTransferAborted(Message m, DTNHost from, DTNHost to) {}


	public void messageTransferred(Message m, DTNHost from, DTNHost to,
			boolean finalTarget) {}


	public void newMessage(Message m) {}


	public void messageTransferStarted(Message m, DTNHost from, DTNHost to) {}


	@Override
	public void done() {
		super.done();
	}

}
